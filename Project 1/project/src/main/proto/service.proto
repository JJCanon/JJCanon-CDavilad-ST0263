syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.project.grpc";
option java_outer_classname = "serviceProto";

package service;

service Service {
    rpc Write (RequestClient) returns (ResponseProxy) {}
    rpc Read (RequestClient) returns (ResponseProxy) {}
    rpc WriteDB (RequestProxy) returns (ResponseDB) {}
    rpc ReadDB (RequestProxy) returns (ResponseDB) {}
    rpc InterDataBaseComunication (DataBaseRequest) returns (DataBaseResponse) {}

    //Raft
    rpc RequestVote (VoteRequest) returns (VoteResponse){}
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse){}
}

// Cliente - Proxy
message RequestClient {
    string request_client = 1;
}

message ResponseProxy {
    string response_proxy = 1;
}
//Proxy - DataBase
message RequestProxy{
    string request_proxy = 1;
}

message ResponseDB{
    string response_DB = 1;
}
//DataBase - DataBase
message DataBaseRequest{
    string db_request=1;
}
message DataBaseResponse{
    string db_response=1;
}

//Raft
message VoteRequest {
    int32 term = 1;  //Termino actual del candidato
    int32 candidateId = 2; //ID del candidato que solicita votos
}

message VoteResponse {
    int32 term = 1; //Termino actual del votante
    bool voteGranted=2; //Indica si el voto fue otorgado
}

// Mensajes para la replicacion de raft
message AppendEntriesRequest {
    int32 term = 1; //Termino del leader
    int32 leaderId = 2; //ID del leader
}

message AppendEntriesResponse {
    int32 term = 1; //Termino actual del seguidor
    bool success = 2; //Indica si la replicacion fue exitosa
}